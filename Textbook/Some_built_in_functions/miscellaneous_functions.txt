delete
This function deletes an element from an array. The following example shows the usage of the delete function âˆ’

awk 'BEGIN {
   arr[0] = "One"
   arr[1] = "Two"
   arr[2] = "Three"
   arr[3] = "Four"
   print "Array elements before delete operation:"
   
   for (i in arr) {
      print arr[i]
   }
   delete arr[0]
   delete arr[1]
   print "Array elements after delete operation:"
   
   for (i in arr) {
      print arr[i]
   }
}'

exit
This function stops the execution of a script. It also accepts an optional expr which becomes AWK's return value. The following example describes the usage of exit function.

Example
awk 'BEGIN {
   print "Hello, World !!!"
   exit 10
   print "AWK never executes this statement."
}'

getline
This function instructs AWK to read the next line. The following example reads and displays the marks.txt file using getline function.

Example
awk '{getline; print $0}' marks.txt

next
The next function changes the flow of the program. It causes the current processing of the pattern space to stop. The program reads the next line, and starts executing the commands again with the new line. For instance, the following program does not perform any processing when a pattern match succeeds.

Example
awk '{if ($0 ~/Shyam/) next; print $0}' marks.txt

nextfile
The nextfile function changes the flow of the program. It stops processing the current input file and starts a new cycle through pattern/procedures statements, beginning with the first record of the next file. For instance, the following example stops processing the first file when a pattern match succeeds.

awk '{ if ($0 ~ /file1:str2/) nextfile; print $0 }' file1.txt file2.txt

return
This function can be used within a user-defined function to return the value. Please note that the return value of a function is undefined if expr is not provided. The following example describes the usage of the return function.

Example
function addition(num1, num2) {
   result = num1 + num2
   return result
}
BEGIN {
   res = addition(10, 20)
   print "10 + 20 = " res
}

system
This function executes the specified command and returns its exit status. A return status 0 indicates that a command execution has succeeded. A non-zero value indicates a failure of command execution. For instance, the following example displays the current date and also shows the return status of the command.

awk 'BEGIN { ret = system("date"); print "Return value = " ret }'
